import 'package:flutter/material.dart';
import 'package:flutter_weather/weather/weather.dart';
import 'package:weather_repository/weather_repository.dart' show WeatherCondition;

class WeatherPopulated extends StatelessWidget {
  const WeatherPopulated({
    required this.weather,
    required this.units,
    required this.onRefresh,
    super.key,
  });

  final Weather weather; // D·ªØ li·ªáu th·ªùi ti·∫øt
  final TemperatureUnits units; // ƒê∆°n v·ªã ƒëo nhi·ªát ƒë·ªô (Celsius ho·∫∑c Fahrenheit)
  final ValueGetter<Future<void>> onRefresh; // H√†m ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng k√©o ƒë·ªÉ l√†m m·ªõi

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context); // L·∫•y ch·ªß ƒë·ªÅ hi·ªán t·∫°i ƒë·ªÉ √°p d·ª•ng ki·ªÉu ch·ªØ
    return Stack(
      children: [
        _WeatherBackground(), // N·ªÅn gradient
        RefreshIndicator( // Widget k√©o ƒë·ªÉ l√†m m·ªõi
          onRefresh: onRefresh,
          child: Align(
            alignment: const Alignment(0, -1 / 3), // CƒÉn gi·ªØa v√† d·ªãch l√™n ph√≠a tr√™n m·ªôt ch√∫t
            child: SingleChildScrollView(
              physics: const AlwaysScrollableScrollPhysics(), // Cho ph√©p cu·ªôn d√π n·ªôi dung √≠t
              clipBehavior: Clip.none,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const SizedBox(height: 48), // Kho·∫£ng c√°ch ph√≠a tr√™n
                  _WeatherIcon(condition: weather.condition), // Bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt
                  Text(
                    weather.location, // T√™n ƒë·ªãa ƒëi·ªÉm
                    style: theme.textTheme.displayMedium?.copyWith(
                      fontWeight: FontWeight.w200, // Ki·ªÉu ch·ªØ nh·∫π
                    ),
                  ),
                  Text(
                    weather.formattedTemperature(units), // Nhi·ªát ƒë·ªô ƒë√£ ƒë·ªãnh d·∫°ng
                    style: theme.textTheme.displaySmall?.copyWith(
                      fontWeight: FontWeight.bold, // N·ªïi b·∫≠t nhi·ªát ƒë·ªô
                    ),
                  ),
                  Text(
                    '''Last Updated at ${TimeOfDay.fromDateTime(weather.lastUpdated).format(context)}''',
                    // Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }
}

class _WeatherIcon extends StatelessWidget {
  const _WeatherIcon({required this.condition});

  static const _iconSize = 75.0; // K√≠ch th∆∞·ªõc bi·ªÉu t∆∞·ª£ng

  final WeatherCondition condition; // Tr·∫°ng th√°i th·ªùi ti·∫øt

  @override
  Widget build(BuildContext context) {
    return Text(
      condition.toEmoji, // Chuy·ªÉn tr·∫°ng th√°i th√†nh emoji
      style: const TextStyle(fontSize: _iconSize),
    );
  }
}

extension on WeatherCondition {
  // Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i th·ªùi ti·∫øt th√†nh emoji t∆∞∆°ng ·ª©ng
  String get toEmoji {
    switch (this) {
      case WeatherCondition.clear:
        return '‚òÄÔ∏è';
      case WeatherCondition.rainy:
        return 'üåßÔ∏è';
      case WeatherCondition.cloudy:
        return '‚òÅÔ∏è';
      case WeatherCondition.snowy:
        return 'üå®Ô∏è';
      case WeatherCondition.unknown:
        return '‚ùì';
    }
  }
}

class _WeatherBackground extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final color = Theme.of(context).colorScheme.primaryContainer; // M√†u n·ªÅn ch√≠nh t·ª´ theme
    return SizedBox.expand(
      child: DecoratedBox(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            stops: const [0.25, 0.75, 0.90, 1.0], // C√°c ƒëi·ªÉm d·ª´ng m√†u
            colors: [
              color,
              color.brighten(), // L√†m s√°ng m√†u g·ªëc
              color.brighten(33),
              color.brighten(50),
            ],
          ),
        ),
      ),
    );
  }
}

extension on Color {
  // H√†m m·ªü r·ªông ƒë·ªÉ l√†m s√°ng m·ªôt m√†u
  Color brighten([int percent = 10]) {
    assert(
      1 <= percent && percent <= 100,
      'percentage must be between 1 and 100',
    );
    final p = percent / 100;
    final alpha = a.round();
    final red = r.round();
    final green = g.round();
    final blue = b.round();
    return Color.fromARGB(
      alpha,
      red + ((255 - red) * p).round(), // L√†m s√°ng ƒë·ªè
      green + ((255 - green) * p).round(), // L√†m s√°ng xanh l√°
      blue + ((255 - blue) * p).round(), // L√†m s√°ng xanh d∆∞∆°ng
    );
  }
}

extension on Weather {
  // H√†m m·ªü r·ªông ƒë·ªÉ ƒë·ªãnh d·∫°ng nhi·ªát ƒë·ªô theo ƒë∆°n v·ªã
  String formattedTemperature(TemperatureUnits units) {
    return '''${temperature.value.toStringAsPrecision(2)}¬∞${units.isCelsius ? 'C' : 'F'}''';
  }
}
